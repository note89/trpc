{"title":"8. tRPC-Next.js Integration: Building Type-Safe APIs","id":"kcJxlkvrr8DMhHIbk1ZZifnTamBpK7uBkn5+lwsn5kA=","steps":[{"type":"textOnly","description":"Welcome to this tour of tRPC's integration with Next.js! We'll explore how tRPC seamlessly works with Next.js to provide type-safe API calls between your client and server. This integration simplifies development and enhances type safety across your full-stack application.","title":"","id":"864"},{"type":"highlight","description":"Let's start by examining the createTRPCNext function. This function is the core of tRPC's integration with Next.js, providing a set of utilities and hooks specifically for Next.js applications. It takes options for configuring tRPC and returns an object with various utilities.","file":"packages/next/src/createTRPCNext.tsx","highlight":[{"start":60,"end":65}],"title":"","id":"886"},{"type":"highlight","description":"Inside createTRPCNext, we first create root hooks using createRootHooks. These hooks are essential for managing tRPC state and operations within React components. The withTRPC function is also initialized here, which is used to wrap the Next.js App component for tRPC integration.","file":"packages/next/src/createTRPCNext.tsx","highlight":[{"start":66,"end":74}],"title":"","id":"887"},{"type":"highlight","description":"The function returns a flat proxy object that provides access to various tRPC utilities. This includes hooks like useContext, useUtils, useQueries, and useSuspenseQueries. The proxy also includes the withTRPC higher-order component. This structure allows for easy access to tRPC functionality throughout your Next.js application.","file":"packages/next/src/createTRPCNext.tsx","highlight":[{"start":76,"end":101}],"title":"","id":"888"},{"type":"highlight","description":"Next, let's examine the createNextApiHandler function. This function creates a Next.js API handler that's compatible with tRPC, allowing you to serve your tRPC router through Next.js API routes.","file":"packages/server/src/adapters/next.ts","highlight":[{"start":31,"end":74}],"title":"","id":"866"},{"type":"highlight","description":"The createNextApiHandler function is generic, accepting a TRouter type that extends AnyRouter. This allows it to work with any tRPC router you define. It takes an options object of type NodeHTTPHandlerOptions, which includes your tRPC router and other configuration options. The function returns a NextApiHandler, which is a type provided by Next.js for API route handlers.","file":"packages/server/src/adapters/next.ts","highlight":[{"start":31,"end":33}],"title":"","id":"1633"},{"type":"highlight","description":"Inside the returned async function, we define a getPath helper function. This function extracts the tRPC path from the request's query parameters. It handles both string and array query parameters, joining array elements with '/' if necessary. This flexibility allows for different URL structures in your API routes.","file":"packages/server/src/adapters/next.ts","highlight":[{"start":34,"end":44}],"title":"","id":"1634"},{"type":"highlight","description":"If getPath returns null (meaning no 'trpc' query parameter was found), we create and return an error response. This error suggests that the API route file might not be named correctly. The error is shaped according to your tRPC configuration and returned with a 500 status code. This helps developers quickly identify issues with their API route setup.","file":"packages/server/src/adapters/next.ts","highlight":[{"start":46,"end":65}],"title":"","id":"1635"},{"type":"highlight","description":"If a valid path is found, the function calls nodeHTTPRequestHandler to process the tRPC request. This handler is passed the original options, the Next.js request and response objects, and the extracted path. The nodeHTTPRequestHandler is responsible for executing the appropriate tRPC procedure and sending the response. This is where your tRPC router logic is actually invoked.","file":"packages/server/src/adapters/next.ts","highlight":[{"start":67,"end":73}],"title":"","id":"1636"},{"type":"highlight","description":"The withTRPC function is a higher-order component that wraps your Next.js App component. It sets up the tRPC client and provides the necessary context for your application.","file":"packages/next/src/withTRPC.tsx","highlight":[{"start":34,"end":84}],"title":"","id":"867"},{"type":"highlight","description":"The httpBatchLink function is a crucial component in tRPC's integration with Next.js, enabling efficient batching of HTTP requests. Let's examine its implementation.\n\nThe function is generic, accepting a TRouter type that extends AnyRouter. This allows it to work with any tRPC router you define. It takes an options object of type HTTPBatchLinkOptions, which includes configuration for the batch link.","file":"packages/client/src/links/httpBatchLink.ts","highlight":[{"start":21,"end":23}],"title":"","id":"1684"},{"type":"highlight","description":"Inside the httpBatchLink function, we first resolve the options using resolveHTTPLinkOptions. This likely applies default values or transforms the provided options.\n\nThe maxURLLength is set from the options, defaulting to Infinity if not provided. This setting is used to limit the length of URLs in batched requests, which can be important for compatibility with some servers that have URL length restrictions.","file":"packages/client/src/links/httpBatchLink.ts","highlight":[{"start":24,"end":25}],"title":"","id":"1685"},{"type":"highlight","description":"The httpBatchLink function returns another function that creates a batchLoader. This batchLoader is responsible for handling the actual batching of requests.\n\nThe batchLoader is created for each procedure type (query, mutation, or subscription) and returns an object with two methods: validate and fetch.","file":"packages/client/src/links/httpBatchLink.ts","highlight":[{"start":27,"end":31}],"title":"","id":"1686"},{"type":"highlight","description":"The validate method of the batchLoader determines whether a batch of operations can be combined into a single request based on the resulting URL length.\n\nIf maxURLLength is Infinity, it always returns true for quick calculations. Otherwise, it constructs a potential URL for the batch and checks if its length is within the maxURLLength limit.\n\nThe path for the URL is created by joining the paths of all operations with commas, and inputs are collected from all operations.","file":"packages/client/src/links/httpBatchLink.ts","highlight":[{"start":32,"end":49}],"title":"","id":"1687"},{"type":"highlight","description":"The fetch method of the batchLoader is responsible for sending the actual HTTP request for a batch of operations.\n\nIt starts by creating a combined path and collecting inputs from all operations in the batch. It also merges abort signals from all operations to ensure proper cancellation handling.\n\nThe method then uses jsonHttpRequester to send the request. This likely handles the actual HTTP communication and JSON parsing.","file":"packages/client/src/links/httpBatchLink.ts","highlight":[{"start":50,"end":59}],"title":"","id":"1688"},{"type":"highlight","description":"The fetch method includes sophisticated header handling. If no headers are specified in the options, it uses an empty object.\n\nIf headers are provided as a function, it calls this function with the list of operations, allowing for dynamic header generation based on the batch content.\n\nOtherwise, it uses the static headers provided in the options. This flexibility allows for complex authentication or other custom header logic in your tRPC setup.","file":"packages/client/src/links/httpBatchLink.ts","highlight":[{"start":60,"end":71}],"title":"","id":"1689"},{"type":"highlight","description":"The initTRPC function is a crucial part of setting up tRPC in a Next.js application. It initializes the tRPC backend, defining the base router and procedure builders. In a typical Next.js project, you'd create a separate file (often named `trpc.ts` or `trpc.js`) in your server directory to set this up. Here's how it might look:\n\nIn this example, we're creating a router and defining procedure builders. The `publicProcedure` can be used for endpoints that don't require authentication, while `protectedProcedure` could be used for authenticated routes.\n\nThis setup allows you to create type-safe API routes that can be easily consumed by your Next.js frontend, bridging the gap between your server and client code.","file":"packages/server/src/unstable-core-do-not-import/initTRPC.ts","highlight":[{"start":19,"end":24}],"title":"","id":"869"},{"type":"highlight","description":"Let's look at a practical example of how tRPC is typically set up in a Next.js application. This file shows how to create the tRPC client and set up the necessary configuration.","file":"examples/next-minimal-starter/src/utils/trpc.ts","highlight":[{"start":22,"end":34}],"title":"","id":"870"},{"type":"textOnly","description":"We've explored tRPC's integration with Next.js, from core functions to typical setup. Now, let's see how to use tRPC hooks in a Next.js component:\n\nExample usage in a Next.js page component:\n\n1. Import the `trpc` object we created earlier.\n2. Use the `trpc.yourProcedure.useQuery()` hook to fetch data.\n3. Use the `trpc.yourProcedure.useMutation()` hook for data modifications.\n\nThis pattern enables type-safe, efficient communication between your Next.js frontend and your tRPC backend, streamlining full-stack development.\n\nExplore integrating these hooks into your components to experience the full power of tRPC in Next.js.","title":"","id":"871"}]}